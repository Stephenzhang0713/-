#include <stdio.h>
#include <stdlib.h>
#define maxsize 100
typedef int datatype;
typedef struct snode {
	datatype data[maxsize];
	int top;
}seqstack, *pseqstack;

typedef struct {
	datatype data[maxsize];
	int front, rear;
}seqqueue, *pseqqueue;

pseqqueue init_seqqueue()
{
	pseqqueue q;
	q = (pseqqueue)malloc(sizeof(seqqueue));
	if (q)
	{
		q->front = 0;
		q->rear = 0;
	}
	return q;
}

int empty_seqqueue(pseqqueue q)
{
	if (q&&q->front == q->rear)
		return 1;
	else
		return 0;
}

int In_seqqueue(pseqqueue q, datatype x)
{
	if ((q->front + 1) % maxsize == q->front)
	{
		printf("queue full!");
		return -1;
	}
	else
	{
		q->rear = (q->rear + 1) % maxsize;
		q->data[q->rear] = x;
		return 1;
	}
}

int Out_seqqueue(pseqqueue q, datatype *x)
{
	if (empty_seqqueue(q))
	{
		printf("empty queue");
		return -1;
	}
	else
	{
		q->front = (q->front + 1) % maxsize;
		*x = q->data[q->front];
		return 1;
	}
}

void destroy_seqqueue(pseqqueue *q)
{
	if (*q)
	{
		free(*q);
	}
	*q = NULL;
}
pseqstack init_seqstack(void)
{
	pseqstack s;
	s = (pseqstack)malloc(sizeof(seqstack));
	if (s)
		s->top = -1;
	return s;
}

int empty_seqstack(pseqstack s)
{
	if (s->top == -1)
		return 1;
	else
		return 0;
}

void destroy_seqstack(pseqstack *s)
{
	if (*s)
		free(*s);
	*s = NULL;
	return;
}

int push_seqstack(pseqstack s, datatype x) {
	if (s->top == maxsize - 1)
		return 0;
	else
	{
		s->top++;
		s->data[s->top] = x;
		return 1;
	}
}

int pop_seqstack(pseqstack s, datatype *x)
{
	if (empty_seqstack(s) && !s)
		return 0;
	else
	{
		*x = s->data[s->top];
		s->top--;
		return 1;
	}
}

int convert_seqstack(int n, int r)
{
	pseqstack s;
	datatype x;
	if (!r)
	{
		return 0;
	}
	s = init_seqstack();
	if (!s)
	{
		printf("stack initialized error");
		return 0;
	}
	while (n)
	{
		push_seqstack(s, n%r);
		n = n / r;
	}
	while (!empty_seqstack(s)) {
		pop_seqstack(s, &x);
		printf("%d", x);
	}
	destroy_seqstack(&s);
	return 1;
}

int convert_seqqueue(float n, int r)
{
	pseqqueue q;
	datatype x;
	if (!r)
	{
		printf("基数不为0");
		return 0;
	}
	q = init_seqqueue();
	while (n)
	{
		In_seqqueue(q, (int)(n*r));
		n = n*r - (int)(n*r);
	}
	while(!empty_seqqueue(q))
	{
		Out_seqqueue(q, &x);
		printf("%d", x);
	}
		destroy_seqqueue(&q);
		return 1;
}

int main()
{
	printf("输入你想转换的数:\n");
	float x, y;
	int z,r;
	scanf_s("%f",&x);
	z = (int)x;
	y = x - z;
	printf("输入你想转换的进制r：\n");
	scanf_s("%d", &r);
	convert_seqstack(z, r);
	if (z==0)			//如果整数部分为0，则先输出整数部分0
	{
		printf("0");
	}
	printf(".");
	convert_seqqueue(y, r);
	system("pause");
	return 0;
}
